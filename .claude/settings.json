{
  "env": {
    "TRIVANCE_ENV": "local"
  },
  "model": "opusplan",
  "permissions": {
    "defaultMode": "acceptEdits",
    "allow": [
      "Bash",
      "Read",
      "Write",
      "Update",
      "Edit",
      "MultiEdit",
      "Glob",
      "Grep",
      "LS",
      "mcp__github",
      "mcp__ide",
      "WebFetch",
      "WebSearch",
      "Task",
      "TodoWrite",
      "NotebookEdit",
      "BashOutput",
      "KillBash"
    ],
    "deny": [
      "Bash(sudo:*)",
      "Bash(doas:*)",
      "Bash(su:*)",
      "Bash(sudo -:*)",
      "Bash(\\sudo:*)",
      "Bash(rm:*)",
      "Bash(rm -rf:*)",
      "Bash(rm -r:*)",
      "Bash(\\rm:*)",
      "Bash(shred:*)",
      "Bash(wipe:*)",
      "Bash(find -delete)",
      "Bash(find -exec rm)",
      "Bash(dd:*)",
      "Bash(mkfs:*)",
      "Bash(fdisk:*)",
      "Bash(kill -9:*)",
      "Bash(pkill:*)",
      "Bash(eval:*)",
      "Bash(exec:*)",
      "Bash(git push --force:*)",
      "Bash(git push -f:*)",
      "Bash(git reset --hard:*)",
      "Bash(git reset --hard HEAD~:*)",
      "Bash(git checkout --:*)",
      "Bash(git clean -f:*)",
      "Bash(git clean -fd:*)",
      "Bash(git push origin main)",
      "Bash(git push origin master)",
      "Bash(git branch -D main)",
      "Bash(git branch -D master)",
      "Read(/etc/**)",
      "Read(/bin/**)",
      "Read(/usr/bin/**)",
      "Read(/sbin/**)",
      "Read(/usr/sbin/**)",
      "Read(/System/**)",
      "Read(/Library/System/**)",
      "Read(/private/etc/**)",
      "Read(/var/log/**)",
      "Read(/opt/**)",
      "Read(/usr/local/bin/**)",
      "Read(/usr/local/sbin/**)",
      "Read(/Library/LaunchDaemons/**)",
      "Read(/Library/LaunchAgents/**)",
      "Read(/Users/*/.bash_history)",
      "Read(/Users/*/.zsh_history)",
      "Read(/Users/*/.python_history)",
      "Read(**/.aws/**)",
      "Read(**/.docker/config.json)",
      "Read(**/token*)",
      "Read(**/credential*)",
      "Read(**/*_rsa)",
      "Read(**/*_ed25519)",
      "Read(**/.*history)",
      "Write(/etc/**)",
      "Write(/bin/**)",
      "Write(/usr/bin/**)",
      "Write(/sbin/**)",
      "Write(/usr/sbin/**)",
      "Write(/System/**)",
      "Write(/Library/System/**)",
      "Write(/private/etc/**)",
      "Edit(/etc/**)",
      "Edit(/bin/**)",
      "Edit(/usr/bin/**)",
      "Edit(/sbin/**)",
      "Edit(/usr/sbin/**)",
      "Edit(/System/**)",
      "Edit(/Library/System/**)",
      "Edit(/private/etc/**)",
      "Read(*.env)",
      "Read(.env*)",
      "Read(secrets/**)",
      "Read(*.key)",
      "Read(*.pem)",
      "Read(id_rsa*)",
      "Read(id_ed25519*)",
      "Read(id_dsa*)",
      "Read(id_ecdsa*)",
      "Read(*.p12)",
      "Read(*.pfx)",
      "Read(.ssh/config)",
      "Read(.ssh/known_hosts)",
      "Write(*.env)",
      "Write(.env*)",
      "Write(secrets/**)",
      "Write(*.key)",
      "Write(*.pem)",
      "Write(id_rsa*)",
      "Write(id_ed25519*)",
      "Write(.ssh/**)",
      "Edit(*.env)",
      "Edit(.env*)",
      "Edit(secrets/**)",
      "Edit(*.key)",
      "Edit(*.pem)",
      "Edit(id_rsa*)",
      "Edit(id_ed25519*)",
      "Edit(.ssh/**)",
      "Bash(ssh:*)",
      "Bash(nc:*)",
      "Bash(netcat:*)",
      "Bash(nmap:*)",
      "Bash(telnet:*)",
      "Bash(socat:*)",
      "Bash(curl | bash)",
      "Bash(curl | sh)",
      "Bash(wget | bash)",
      "Bash(wget | sh)",
      "Bash(wget --post:*)",
      "Bash(curl -X POST:*)",
      "Bash(curl -d:*)",
      "Bash(chmod 777:*)",
      "Bash(chmod -R 777:*)",
      "Bash(chmod u+s:*)",
      "Bash(chown root:*)",
      "Bash(chown -R root:*)",
      "Bash(mount:*)",
      "Bash(umount:*)",
      "Bash(docker run --privileged:*)",
      "Bash(docker exec --privileged:*)",
      "Bash(docker run --user root:*)",
      "Bash(docker run -v /:*)",
      "Bash(systemctl:*)",
      "Bash(service:*)",
      "Bash(launchctl:*)",
      "Bash(crontab:*)",
      "Bash(at:*)",
      "Bash(batch:*)",
      "Bash(perl -e:*)",
      "Bash(ruby -e:*)",
      "Bash(php -r:*)",
      "Bash(python -c:*)",
      "Bash(python3 -c:*)",
      "Bash(node -e:*)",
      "Bash(function:*)",
      "Bash(alias:*)",
      "Bash(env:*)",
      "Bash(docker run -v /Users:*)",
      "Bash(docker run -v /System:*)",
      "Bash(docker run -v /Library:*)",
      "Bash(docker run -v /Applications:*)",
      "Bash($(sudo:*))",
      "Bash($(rm:*))",
      "Bash($(dd:*))",
      "Bash($(kill:*))",
      "Bash(`sudo`:*)",
      "Bash(`rm`:*)",
      "Bash(* > /etc/*)",
      "Bash(* > /System/*)",
      "Bash(* > /Library/*)",
      "Bash(* > /bin/*)",
      "Bash(* > /usr/bin/*)",
      "Bash(find -exec shred)",
      "Bash(find -exec dd)",
      "Bash(tar --overwrite:*)",
      "Bash(ln -s:*)",
      "Bash(kill -:*)",
      "Bash(r?m:*)",
      "Bash(??rm:*)"
    ]
  },
  "statusLine": {
    "type": "command",
    "command": "npx -y ccstatusline@latest",
    "padding": 0
  },
  "cleanupPeriodDays": 7,
  "enableAllProjectMcpServers": true,
  "hooks": {
    "UserPromptSubmit": [
      {
        "hooks": [
          {
            "type": "command",
            "command": "$CLAUDE_PROJECT_DIR/.claude/scripts/hooks/ccnotify.py UserPromptSubmit"
          },
          {
            "type": "command",
            "command": "$CLAUDE_PROJECT_DIR/.claude/scripts/hooks/minimal_thinking.py"
          }
        ]
      }
    ],
    "Stop": [
      {
        "hooks": [
          {
            "type": "command",
            "command": "$CLAUDE_PROJECT_DIR/.claude/scripts/hooks/ccnotify.py Stop"
          }
        ]
      }
    ],
    "Notification": [
      {
        "hooks": [
          {
            "type": "command",
            "command": "$CLAUDE_PROJECT_DIR/.claude/scripts/hooks/ccnotify.py Notification"
          }
        ]
      }
    ],
    "PostToolUse": [
      {
        "matcher": "Edit|Write|MultiEdit",
        "hooks": [
          {
            "type": "command",
            "command": "$CLAUDE_PROJECT_DIR/.claude/scripts/hooks/security_guard.py"
          },
          {
            "type": "command",
            "command": "$CLAUDE_PROJECT_DIR/.claude/scripts/hooks/clean_code.py"
          }
        ]
      }
    ]
  }
}
