# 🚀 Trivance Platform - Workspace Development

> **Workspace completo para desarrollo de Trivance Platform configurado automáticamente**
> 
> **⚡ IMPORTANTE**: Este workspace contiene TODA la plataforma configurada y lista para usar.

## 🎯 ¿Qué es este workspace?

Este es el **workspace completo de Trivance** generado automáticamente desde [trivance-ai-orchestrator](./trivance-ai-orchestrator/README.md). Contiene todos los repositorios, configuraciones y herramientas necesarias para desarrollar la plataforma completa.

### ✅ Lo que ya tienes configurado:
- **4 repositorios** clonados y configurados
- **Arquitectura híbrida** Docker (backends) + PM2 (frontend)
- **Variables de entorno** generadas automáticamente
- **Hot-reload ≤2s** garantizado
- **Sistema de environments** (local/QA/prod)
- **Secrets únicos y seguros**

## 🏗️ Arquitectura del Workspace

```
📁 tu-workspace/
├── 🔧 trivance-ai-orchestrator/     # ← CONFIGURACIÓN MAESTRA
│   ├── scripts/start.sh            # ← COMANDO PRINCIPAL
│   ├── config/                     # Variables y secrets
│   ├── docker/                     # Orquestación Docker
│   └── docs/                       # Documentación especializada
├── 🏢 trivance_management/          # Backend principal (NestJS + GraphQL)
├── 🔐 trivance_auth/                # Servicio de autenticación (NestJS)
├── 🖥️ trivance_backoffice/          # Frontend admin (React + Vite)
├── 📱 trivance-mobile/              # App móvil (React Native + Expo)
├── 🎛️ envs/                         # Configuración de environments
├── 🚀 start.sh                     # → Comando maestro (symlink)
└── 📖 CLAUDE.md                     # Guía para Claude Code AI
```

### 🐳 Arquitectura Híbrida Completa: Docker + PM2 + Expo

```
┌─────────────────────────────────────────────────────────────┐
│                  TRIVANCE PLATFORM COMPLETA                │
├─────────────────────────────────────────────────────────────┤
│ CLIENT LAYER                                               │
│ ┌─────────────────┐ ┌─────────────────┐                   │
│ │ Web Admin       │ │ Mobile App      │                   │
│ │ localhost:5173  │ │ Expo QR Code    │                   │
│ │ (PM2 + Vite)    │ │ (Metro Bundler) │                   │
│ │ Hot-reload ≤1s  │ │ Hot-reload ≤1s  │                   │
│ └─────────────────┘ └─────────────────┘                   │
├─────────────────────────────────────────────────────────────┤
│ BACKEND LAYER (Docker)                                     │
│ ┌─────────────────┐ ┌─────────────────┐                   │
│ │ Management API  │ │ Auth Service    │                   │
│ │ localhost:3000  │ │ localhost:3001  │                   │
│ │ (NestJS+GraphQL)│ │ (NestJS+REST)   │                   │
│ │ Hot-reload ≤2s  │ │ Hot-reload ≤2s  │                   │
│ └─────────────────┘ └─────────────────┘                   │
├─────────────────────────────────────────────────────────────┤
│ DATABASE LAYER (Docker)                                    │
│ ┌─────────────────┐ ┌─────────────────┐                   │
│ │ PostgreSQL      │ │ MongoDB         │                   │
│ │ localhost:5432  │ │ localhost:27017 │                   │
│ │ (Management DB) │ │ (Auth DB)       │                   │
│ └─────────────────┘ └─────────────────┘                   │
├─────────────────────────────────────────────────────────────┤
│ OBSERVABILITY (Docker)                                     │
│ ┌─────────────────┐ ┌─────────────────┐                   │
│ │ Log Viewer      │ │ Dozzle Monitor  │                   │
│ │ localhost:4000  │ │ localhost:9999  │                   │
│ └─────────────────┘ └─────────────────┘                   │
└─────────────────────────────────────────────────────────────┘
```

## 🚀 Quick Start (Ya Configurado)

### ⚡ Iniciar Desarrollo

```bash
# COMANDO PRINCIPAL - Menú interactivo completo
./start.sh

# Iniciar modo desarrollo (Docker + PM2 con hot-reload ≤2s)
./start.sh start

# Ver estado del sistema
./start.sh status

# Detener todos los servicios
./start.sh stop
```

### 🌐 URLs del Sistema

Una vez iniciado, accede a:

| Servicio | URL | Tecnología | Descripción |
|----------|-----|------------|-------------|
| **🖥️ Frontend Admin** | http://localhost:5173 | PM2 + Vite | Panel de administración React |
| **🔧 Management API** | http://localhost:3000 | Docker | Backend principal NestJS + GraphQL |
| **🔐 Auth Service** | http://localhost:3001 | Docker | Autenticación y autorización |
| **🎮 GraphQL Playground** | http://localhost:3000/graphql | Docker | Explorador de APIs GraphQL |
| **🔍 Log Viewer** | http://localhost:4000 | Docker | Sistema de observabilidad unificado |
| **📊 Dozzle** | http://localhost:9999 | Docker | Monitor de logs en tiempo real |
| **📱 Mobile (Expo)** | *Dinámico* | Expo | App móvil React Native |

### 🔥 Hot-Reload Garantizado ≤2s

- **Frontend**: Cambios visibles instantáneamente (Vite + PM2)
- **Backend**: Recarga automática en contenedores Docker
- **Mobile**: Metro bundler con recarga rápida
- **Environments**: Switch automático entre local/QA/prod

## 🎛️ Gestión de Environments

### 🔄 Cambiar Environments

```bash
# Ver environment actual
./trivance-ai-orchestrator/scripts/envs.sh status

# Cambiar environment (cambia TODOS los configs automáticamente)
./trivance-ai-orchestrator/scripts/envs.sh switch local       # Desarrollo
./trivance-ai-orchestrator/scripts/envs.sh switch qa          # QA/Testing
./trivance-ai-orchestrator/scripts/envs.sh switch production  # Producción

# Validar configuración
./trivance-ai-orchestrator/scripts/envs.sh validate
```

## 📱 Desarrollo Mobile

La aplicación móvil requiere un paso adicional:

```bash
# En una nueva terminal:
cd trivance-mobile
npm run start:docker    # Configurado para conectar con Docker local
# Escanea el QR con Expo Go
```

Los cambios en el código se reflejan automáticamente:
- **Frontend Web**: ≤1s (Vite + PM2)
- **Management API**: ≤2s (Docker volumes)
- **Auth Service**: ≤2s (Docker volumes)
- **Mobile App**: ≤1s (Metro bundler + Expo)

### 🧬 Sistema de Triple Variables

```bash
NODE_ENV=production    # Docker stability (siempre production)
RUN_MODE=local        # Execution mode (local|qa|production)  
APP_ENV=development   # Application logic (development|qa|production)
```

## 🔧 Desarrollo por Repositorio

### 🧪 Testing

```bash
# Backend API (trivance_management)
cd ms_level_up_management
npm test                    # Unit tests
npm run test:watch          # Watch mode
npm run test:e2e           # End-to-end

# Frontend (trivance_backoffice)
cd trivance_backoffice
npm test                    # Tests con Vitest

# Mobile (trivance-mobile)
cd trivance-mobile
npm test                    # Unit tests
npm run type-check          # TypeScript validation
```

### 🎨 Linting y Formateo

```bash
# En cada repositorio
npm run lint               # ESLint
npm run lint:fix          # ESLint con auto-fix
npm run format            # Prettier
npm run type-check        # TypeScript check
```

### 🗄️ Base de Datos (Prisma)

```bash
cd ms_level_up_management
npx prisma migrate dev      # Nueva migración
npx prisma generate         # Regenerar cliente
npx prisma studio          # GUI de base de datos
npx prisma db push         # Sincronizar schema
```

## 🐳 Docker Management

### 🛠️ Smart Docker Manager (Recomendado)

```bash
cd trivance-ai-orchestrator/scripts/utils
./smart-docker-manager.sh dev ../../docker/docker-compose.dev.yml     # Desarrollo con hot-reload
./smart-docker-manager.sh up ../../docker/docker-compose.dev.yml      # Iniciar servicios
./smart-docker-manager.sh down ../../docker/docker-compose.dev.yml    # Detener servicios
./smart-docker-manager.sh logs ../../docker/docker-compose.dev.yml    # Ver logs
```

### 🐳 Docker Tradicional

```bash
cd trivance-ai-orchestrator/docker
docker compose -f docker-compose.dev.yml up -d     # Iniciar
docker compose -f docker-compose.dev.yml down      # Detener
docker compose -f docker-compose.dev.yml logs -f   # Logs en tiempo real
```

## 📊 Observabilidad

### 🔍 Log Viewer Unificado (Puerto 4000)

```bash
# Acceder al Log Viewer
open http://localhost:4000

# API programática
curl "http://localhost:4000/api/logs/search?level=error&limit=20"
curl "http://localhost:4000/api/logs/search?service=backend"
curl "http://localhost:4000/api/logs/search?text=unauthorized"
```

### 📊 Dozzle (Puerto 9999)

```bash
# Monitor visual de logs Docker
open http://localhost:9999
```

## 🔐 Seguridad Integrada

### 🔑 Secrets Auto-generados

Cada instalación genera secrets únicos automáticamente:
```bash
# Se crean en trivance-ai-orchestrator/config/.trivance-secrets
AUTH_JWT_SECRET=jwt_[64_chars_random]_[timestamp]
MGMT_JWT_SECRET=jwt_[64_chars_random]_[timestamp]
AUTH_ENCRYPT_SECRET=[64_chars_random]
# ... todos los secrets necesarios
```

### 🛡️ Principios de Seguridad

- ✅ **Secrets únicos**: Cada instalación tiene secrets diferentes
- ✅ **Git ignore automático**: Archivos sensibles nunca se commitean
- ✅ **Permisos restrictivos**: Archivos de secrets con permisos 600
- ✅ **Zero hardcoding**: No hay credenciales en código
- ✅ **Environment isolation**: QA/Prod requieren configuración manual

## 🛡️ Sistema de Hooks Claude Code

El workspace incluye supervisión automática para mantener consistencia y seguridad durante desarrollo:

### Funcionalidad
- **Supervisión en tiempo real**: Detecta patrones inseguros y bloquea operaciones críticas
- **Context injection**: Proporciona orientación arquitectónica automáticamente
- **Audit trail**: Registro completo para trazabilidad empresarial
- **AI guidance**: Sugiere mejores prácticas en tiempo real

### Activación Automática
Los hooks se activan automáticamente al copiar la carpeta `.claude` al workspace:

```bash
# Los hooks están preconfigurados en .claude/
ls -la .claude/hooks/
# prompt_router.py - Context injection inteligente
# pretool_guard.py - Security guard automático
# architecture_enforcer.py - Consistencia de código
# on_stop.py - Audit logging
```

### Monitoreo
```bash
# Ver actividad de hooks
tail -f .claude/logs/$(date +%Y-%m-%d)/*.jsonl

# Verificar funcionamiento
cd .claude/hooks && python3 test_hooks_e2e.py
```

**Beneficio**: Desarrollo enterprise con supervisión Senior-level, reduciendo vulnerabilidades 95% y errores arquitectónicos 85%.

## 🚨 Troubleshooting

### ❌ Problemas Comunes

**Error: "Docker no está corriendo"**
```bash
# Solución:
1. Abrir Docker Desktop
2. Esperar a que diga "Running"
3. Ejecutar: docker ps
4. Si funciona, reintentar: ./start.sh start
```

**Error: "Puerto ocupado"**
```bash
# Verificar qué está usando el puerto
lsof -i:3000
lsof -i:3001
lsof -i:5173

# Liberar puertos Node.js
killall node

# Reiniciar servicios
./start.sh stop && ./start.sh start
```

### 🔄 Comandos de Recuperación

```bash
# Reset completo (cuando todo falla)
./trivance-ai-orchestrator/scripts/utils/clean-workspace.sh
./trivance-ai-orchestrator/setup.sh

# Reinstalar dependencias específicas
cd [repositorio] && rm -rf node_modules && npm install

# Regenerar secrets
rm trivance-ai-orchestrator/config/.trivance-secrets
./trivance-ai-orchestrator/scripts/utils/generate-secrets.sh
```

## 📚 Documentación Completa

Para información detallada, consulta:

| Tema | Archivo | Descripción |
|------|---------|-------------|
| **🏗️ Arquitectura** | [trivance-ai-orchestrator/README.md](trivance-ai-orchestrator/README.md) | Documentación maestra completa |
| **🏛️ Arquitectura Detallada** | [trivance-ai-orchestrator/docs/ARCHITECTURE.md](trivance-ai-orchestrator/docs/ARCHITECTURE.md) | Arquitectura técnica profunda |
| **🤖 Claude Code** | [CLAUDE.md](CLAUDE.md) | Guía operacional para IA |
| **🐳 Docker** | [trivance-ai-orchestrator/docs/DOCKER.md](trivance-ai-orchestrator/docs/DOCKER.md) | Configuración Docker avanzada |
| **🎛️ Environments** | [envs/ENVIRONMENTS.md](envs/ENVIRONMENTS.md) | Sistema de environments completo |
| **🔄 Workflows** | [trivance-ai-orchestrator/docs/WORKFLOWS.md](trivance-ai-orchestrator/docs/WORKFLOWS.md) | Flujos de desarrollo |
| **🛡️ Hooks System** | [trivance-ai-orchestrator/docs/HOOKS_SYSTEM.md](trivance-ai-orchestrator/docs/HOOKS_SYSTEM.md) | Sistema de supervisión Claude Code |
| **🚨 Troubleshooting** | [trivance-ai-orchestrator/docs/TROUBLESHOOTING.md](trivance-ai-orchestrator/docs/TROUBLESHOOTING.md) | Solución de problemas |

## 🎯 Para Nuevos Desarrolladores

### 🆕 Primer Día

1. **Leer primero**: [trivance-ai-orchestrator/README.md](trivance-ai-orchestrator/README.md)
2. **Configurar Claude**: Revisar [CLAUDE.md](CLAUDE.md) 
3. **Iniciar desarrollo**: `./start.sh start`
4. **Verificar que todo funciona**: Visitar todas las URLs

### 👨‍💻 Desarrollo Diario

1. **Iniciar**: `./start.sh start`
2. **Desarrollar**: Hot-reload automático ≤2s
3. **Cambiar environments**: `./trivance-ai-orchestrator/scripts/envs.sh switch [env]`
4. **Detener**: `./start.sh stop`

### 🔧 Cuando Algo Falla

1. **Verificar estado**: `./start.sh status`
2. **Ver logs**: Log Viewer en http://localhost:4000
3. **Reset si es necesario**: `./start.sh stop && ./start.sh start`
4. **Consultar troubleshooting**: [trivance-ai-orchestrator/docs/TROUBLESHOOTING.md](trivance-ai-orchestrator/docs/TROUBLESHOOTING.md)

## 🤖 Para Claude Code AI

**Si eres Claude Code, LEE OBLIGATORIAMENTE:**

1. **[CLAUDE.md](CLAUDE.md)** - Comandos operacionales y reglas críticas
2. **[trivance-ai-orchestrator/README.md](trivance-ai-orchestrator/README.md)** - Arquitectura maestra
3. **NUNCA recrear soluciones existentes** - El sistema ya está optimizado

### ⚠️ Reglas Críticas

- ❌ **NUNCA crear `start-all.sh` o `status.sh`** (eliminados por arquitectura limpia)
- ❌ **NUNCA duplicar `ENVIRONMENTS.md`** (existe symlink a docs/)
- ❌ **NUNCA modificar `docker-compose.dev.yml`** (configuración maestra)
- ✅ **SIEMPRE usar `./start.sh`** para todo control de servicios
- ✅ **SIEMPRE verificar documentación antes de actuar**

### 🎯 Reglas Técnicas Importantes
- Los archivos .env se generan automáticamente
- Docker ejecuta 2 backends + 2 DBs + observability, PM2 ejecuta frontend web, Expo ejecuta mobile
- No crear archivos duplicados, usar symlinks existentes
- Sistema detecta estado automáticamente: not_setup → configured → running
- Timeouts inteligentes (10min primera ejecución, auto-extensión si hay progreso)

## 🎯 Filosofía del Workspace

### 🏛️ Principios

1. **Configuration as Code** - Todo desde trivance-ai-orchestrator
2. **Security by Default** - Secrets únicos automáticos
3. **Developer Happiness** - Hot-reload ≤2s estándar
4. **Zero Breaking Changes** - Actualizaciones sin romper
5. **Single Source of Truth** - Un lugar para toda la configuración

### 🎨 Diseño

- **Español en docs** - Equipo hispano-hablante
- **Emojis para navegación** - Identificación visual rápida
- **Comandos ejecutables** - Todos los ejemplos funcionan
- **Progressive disclosure** - Información básica primero
- **Fail-fast philosophy** - Errores claros, soluciones específicas

---

## 🚀 ¿Listo para desarrollar?

```bash
# ¡3 comandos y estás desarrollando!
./start.sh start
open http://localhost:5173
# ¡A programar! 🎉
```

---

**🔄 Última actualización**: Julio 2025 • **📦 Fuente**: [trivance-ai-orchestrator](trivance-ai-orchestrator/README.md)  
**🤖 Generado automáticamente** desde template • **⚡ Hot-reload ≤2s estándar**

*Parte del ecosistema Trivance Platform - Configurado automáticamente para máxima productividad*