# TRIVANCE PLATFORM - Workspace Principal
<!-- workspace: trivance-platform | role: master_workspace | scope: ecosystem_completo -->

## **Einstein Principle**: "Everything should be made as simple as possible, but not simpler"

## **Fortune 500 Enterprise Standards**
Operate at Fortune 500 enterprise standards: every output must be production-ready with quantified business impact, industry-benchmarked quality, and immediate actionable value that executives can confidently present to boards.

## Professional Communication Standards
- Maintain professional, minimalist, and clear language
- Eliminate promotional or redundant content
- Focus on actionable intelligence and measurable outcomes

## üéØ Plataforma Esencial

**Trivance Platform**: 4 servicios integrados con arquitectura h√≠brida Docker + PM2 + Expo
- **Management API** (NestJS + GraphQL, puerto 3000)
- **Auth Service** (NestJS + REST, puerto 3001) 
- **Admin Frontend** (React + Vite, puerto 5173)
- **Mobile App** (React Native + Expo)

### ‚ö° Reglas Cr√≠ticas

**NUNCA:**
- ‚ùå Crear `start-all.sh` o scripts duplicados (eliminados por arquitectura limpia)
- ‚ùå Modificar `docker-compose.dev.yml` sin revisar documentaci√≥n
- ‚ùå Ignorar hot-reload ‚â§2s est√°ndar (no es opcional)

**SIEMPRE:**
- ‚úÖ Usar `./start.sh` como comando maestro
- ‚úÖ Preservar arquitectura multi-repo existente
- ‚úÖ Consultar @documentaci√≥n antes de cambios mayores

## ‚ö° Comandos Esenciales

```bash
# Comando maestro - Men√∫ interactivo completo
./start.sh

# Comandos directos
./start.sh start   # üöÄ EST√ÅNDAR: Docker dev + hot-reload ‚â§2s
./start.sh stop    # üõë Detener todos los servicios
./start.sh status  # üìä Ver estado del sistema
```

### URLs de Desarrollo
- **Frontend Admin**: http://localhost:5173
- **Management API**: http://localhost:3000 (GraphQL: /graphql)
- **Auth Service**: http://localhost:3001 (Swagger: /api-docs)
- **Log Viewer**: http://localhost:4000
- **Dozzle Monitor**: http://localhost:9999

## üîß Comandos de Desarrollo

```bash
# Testing por servicio
cd trivance_management && npm test        # Backend: Jest
cd trivance_backoffice && npm test           # Frontend: Vitest
cd trivance-mobile && npm run type-check     # Mobile: TypeScript

# Linting est√°ndar en cada repo
npm run lint && npm run format

# Base de datos (Prisma)
cd trivance_management
npx prisma migrate dev && npx prisma generate
```

## üéõÔ∏è Gesti√≥n de Environments

```bash
# Ver/cambiar environment
./trivance-ai-orchestrator/scripts/envs.sh status
./trivance-ai-orchestrator/scripts/envs.sh switch [local|qa|production]
```

## üèóÔ∏è Arquitectura

**Stack Principal:**
- **Backend**: NestJS + GraphQL/REST + PostgreSQL/MongoDB
- **Frontend**: React + Vite + Redux Toolkit + Tailwind
- **Mobile**: React Native + Expo
- **Infraestructura**: Docker + PM2 h√≠brido

**Flujo de Datos:** Frontend/Mobile ‚Üí Management API ‚Üí PostgreSQL, Auth API ‚Üí MongoDB

## üé® Patrones de C√≥digo

**NestJS**: Repository pattern con Prisma/Mongoose, DTO validation, Dependency injection
**React**: Hooks-first, Redux Toolkit, TypeScript interfaces
**Mobile**: Redux Persist, Expo services, environment switching

## üìä Observabilidad

**Log Viewer** (puerto 4000): Sistema centralizado con API REST para b√∫squedas
**Dozzle** (puerto 9999): Monitor visual de contenedores Docker
**Filtros**: service, level, traceId, sessionId, text search

## üö® Troubleshooting

**Problemas comunes:**
- Puerto ocupado: `./start.sh stop && ./start.sh start`
- Docker no disponible: Verificar Docker Desktop activo
- Hot-reload >2s: Comprobar vol√∫menes Docker en docker-compose

**Debugging:**
- Logs: `pm2 logs` (frontend), `docker logs [container]` (backend)
- Observabilidad: http://localhost:4000 (unificado), http://localhost:9999 (Docker)
- Health checks: `./start.sh status`

## ‚ö†Ô∏è Reglas T√©cnicas Cr√≠ticas

- **Docker obligatorio**: Backends y DBs requieren Docker activo
- **Hot-reload ‚â§2s**: Est√°ndar no negociable (frontend + backends)
- **Secrets autom√°ticos**: Generados en `.trivance-secrets` (no commitear)
- **Multi-tenant**: Filtrar siempre por `organizationId`
- **Environment switch**: Afecta toda la plataforma simult√°neamente

## üìö Documentaci√≥n de Referencia

### Workspace Context
@./README.md
@./trivance-ai-orchestrator/docs/ARCHITECTURE.md
@./trivance-ai-orchestrator/docs/DEPLOYMENT.md
@./trivance-ai-orchestrator/docs/DOCKER.md
@./trivance-ai-orchestrator/docs/DOZZLE.md
@./trivance-ai-orchestrator/docs/ENVIRONMENTS.md
@./trivance-ai-orchestrator/docs/HOOKS_SYSTEM.md
@./trivance-ai-orchestrator/docs/LOG-VIEWER.md
@./trivance-ai-orchestrator/docs/ONBOARDING.md
@./trivance-ai-orchestrator/docs/TROUBLESHOOTING.md
@./trivance-ai-orchestrator/docs/WORKFLOWS.md

### Service-Specific Context
@./trivance_management/docs/API.md
@./trivance_management/docs/ARCHITECTURE.md
@./trivance_auth/docs/API.md
@./trivance_auth/docs/ARCHITECTURE.md
@./trivance_backoffice/docs/ARCHITECTURE.md
@./trivance_backoffice/docs/FEATURES.md
@./trivance-mobile/docs/ARCHITECTURE.md
@./trivance-mobile/docs/DEVELOPMENT.md

### Referencias Externas
- [NestJS Documentation](https://docs.nestjs.com) - Framework backend
- [GraphQL Best Practices](https://graphql.org/learn/best-practices/) - APIs GraphQL
- [React Documentation](https://react.dev) - Frontend moderno
- [Expo Documentation](https://docs.expo.dev) - Desarrollo m√≥vil

## üìö Referencias de Documentaci√≥n

@./README.md - Gu√≠a general del workspace
@./trivance-ai-orchestrator/docs/ARCHITECTURE.md - Arquitectura t√©cnica detallada
@./trivance-ai-orchestrator/docs/DOCKER.md - Configuraci√≥n Docker avanzada
@./trivance-ai-orchestrator/docs/ENVIRONMENTS.md - Sistema de environments
@./trivance-ai-orchestrator/docs/TROUBLESHOOTING.md - Soluci√≥n de problemas
@./trivance_management/docs/ - Documentaci√≥n Management API
@./trivance_auth/docs/ - Documentaci√≥n Auth Service
@./trivance_backoffice/docs/ - Documentaci√≥n Frontend
@./trivance-mobile/docs/ - Documentaci√≥n Mobile

---

**‚ö†Ô∏è TEMPLATE AUTO-SINCRONIZADO**

Fuente: `trivance-ai-orchestrator/templates/core/CLAUDE.md.template`
Para modificar: editar template y ejecutar `./setup.sh`

## Claude Code Memories

- Never mix Spanish and English. Always use English for code and documentation for Claude Code or AI; use Spanish for documentation for humans. There should never be cases of files with English and Spanish.

- **Einstein Principle**: "Everything should be made as simple as possible, but not simpler"

- **Fortune 500 Enterprise Standards**
**Operate at Fortune 500 enterprise standards: every output must be production-ready with quantified business impact, industry-benchmarked quality, and immediate actionable value that executives can confidently present to boards.**

- Interaction Language
1. Respond in **the language of the user's first interaction**
2. On startup, show: *(You can change the language by typing `language` - replace with your preferred one -)*

- **Professional Communication Standards**
1. Maintain professional, minimalist, and clear language
2. Eliminate promotional or redundant content
3. Focus on actionable intelligence and measurable outcomes

- All plans you propose of any kind must be AI-first, meaning they must be executed by an advanced AI like Claude Code and overseen and directed by a human. This also means NOT including deadlines in the plan; they are irrelevant in this context.

- **Simplicity Intuition Principle**: Operate under the principle of creating elegant, simple solutions to complex challenges. Avoid the false dilemma of overengineering or mediocrity. Ensure that every interaction prioritizes simplicity while maintaining profound complexity and excellence, without exception.